global gx = 0 gy = 0;global readingX;global counterreadingX = true;counter = 0;function value = userInput()  global gx gy readingX;  if (readingX)    value = gx;    readingX = false;  else     value = gy;    readingX = true;  endifendfunctionwidth = 50;height = 50;global grid;global grid_value;grid = zeros(height, width);function userOutput(value)  global gx gy grid_value;  grid_value = value;endfunctionfunction mock = readMock()  mock = char([]);  fid = fopen('mock_beam.txt');  tline = fgetl(fid);  while ischar(tline)    mock = [mock; tline];    tline = fgetl(fid);  endwhile  mock(mock == '#') = 1;  mock(mock == '.') = 0;  mock = int8(mock);endfunctionglobal mock;mock = readMock();function printBeam(grid)  grid = char(grid);  grid(grid == 1) = "#";  grid(grid == 0) = ".";  new_lines = zeros(size(grid,1), 1);  disp(char([grid, new_lines]));endfunctionfunction grid = visualizeBeam(beam)  height = size(beam, 1);  width = beam(size(beam, 1), 2);  grid = zeros(height, width);  for row = 1:height    grid(row, beam(row,1)+1:beam(row,2)) = 1;  endforendfunctionfunction plotBeam(beam)  grid = visualizeBeam(beam);  grid(grid==1) = 1000;  imagesc(uint16(grid));  colorbar ();endfunctionglobal memmem = csvread("day_19.in");function value = getGridAt(y, x)    global gx gy mem grid_value;    gx = x;    gy = y;    run(mem,@userInput,@userOutput);    value = grid_value;endfunctionfunction value = getMockAt(y, x)  global mock;  value = mock(y + 1, x + 1);endfunctionbeam = [];function value = isFinish(beam, ship_size)  value = false;  for row = 1:size(beam, 1)    starts = beam(row, 1);    ends = beam(row, 2);    if (row + ship_size <= size(beam, 1) &&       beam(row + ship_size - 1, 1) <= ends - ship_size - 1)      x = beam(row + ship_size - 1, 1);      y = row - 1;      disp([num2str(beam(row + ship_size - 1, 1)), "<=", num2str(ends - ship_size)])      disp(["left upper corner x y ", num2str(x), " ", num2str(y)]);      #disp(["left down corner x y", num2str(ends - ship_size), " ", num2str(beam(row + ship_size, 1))])      #disp(["right upper corner x y ", num2str(ends), " ", num2str(row)])      disp(["Found soultion: ", num2str(10000 * (x) + row - 1)]);      value = true;      return;    endif  endforendfunctiontic();ship_size = 100;beam_width = 0;beam_end = 0;beam_start = 0;y = 0;running = true;while (running)  found_beam = false;  x = beam_start;  #disp(["line", num2str(y)]);  #disp(["beam start", num2str(beam_start)]);  #disp(["beam width", num2str(beam_width)]);  #disp(["beam end", num2str(beam_end)]);  while(true)    # disp([y x]);    current = getGridAt(y,x);    if(current == 1 && !found_beam)      found_beam = true;      beam_start = x;      disp(["beam starts at ", num2str(x)]);      if (getGridAt(y - (ship_size - 1), x + ship_size - 1) == 1)        disp(["Found soultion: ", num2str(10000 * (x) + y - (ship_size - 1))]);        running = false;        break;      endif      x += beam_width - 1; # -1 as can be the same width      break;    endif    #if(current == 0 && found_beam)    #  beam_width = x - beam_start;    #  beam_end = x;    #  #disp("beam end");    #  #disp(["line ", num2str(y), " beam width ", num2str(beam_width)]);    #  beam = [beam; [beam_start beam_end]];    #  break;    #endif    if (x > beam_start + 3) # skip rows without beam      beam = [beam; [beam_start beam_start]]; # 0 width      #disp("skip");      break;    endif    x += 1;  endwhile  # if (y == 10)  #   start = beam(size(beam, 1), 1);  #     #endif  disp(["row ", num2str(y)]); #, " width ", num2str(beam(size(beam, 1), 2) - beam(size(beam, 1), 1))]);  #if(isFinish(beam, ship_size))  #  break;  #endif  y += 1;endwhiletoc()