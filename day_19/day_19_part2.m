global gx = 0 gy = 0;global readingX;readingX = true;function value = userInput()  global gx gy readingX;  if (readingX)    value = gx;    readingX = false;  else     value = gy;    readingX = true;  endifendfunctionglobal grid;global grid_value;grid = zeros(height, width);function userOutput(value)  global gx gy grid_value;  grid_value = value;endfunctionfunction mock = readMock()  mock = char([]);  fid = fopen('mock_beam.txt');  tline = fgetl(fid);  while ischar(tline)    mock = [mock; tline];    tline = fgetl(fid);  endwhile  mock(mock == '#') = 1;  mock(mock == '.') = 0;  mock = int8(mock);endfunctionglobal mock;mock = readMock();function printBeam(grid)  grid = char(grid);  grid(grid == 1) = "#";  grid(grid == 0) = ".";  new_lines = zeros(size(grid,1), 1);  disp(char([grid, new_lines]));endfunctionfunction grid = visualizeBeam(beam)  height = size(beam, 1);  width = beam(size(beam, 1), 2);  grid = zeros(height, width);  for row = 1:height    grid(row, beam(row,1)+1:beam(row,2)) = 1;  endforendfunctionfunction plotBeam(beam)  grid = visualizeBeam(beam);  grid(grid==1) = 1000;  imagesc(uint16(grid));  colorbar ();endfunctionglobal memmem = csvread("day_19.in");function value = getGridAt(y, x)    global gx gy mem grid_value;    gx = x;    gy = y;    run(mem,@userInput,@userOutput);    value = grid_value;endfunctionfunction value = getMockAt(y, x)  global mock;  value = mock(y + 1, x + 1);endfunctiontic();ship_size = 100;beam_start = 0;x = 0;y = 0;running = true;while (running)  while(true)    current = getGridAt(y,x);    if(current == 1)      beam_start = x;      if (getGridAt(y - (ship_size - 1), x + ship_size - 1) == 1)        disp(["Found soultion: ", num2str(10000 * (x) + y - (ship_size - 1))]);        running = false;      endif      break;    endif    if (x > beam_start + 3) # skip rows without beam      break;    endif    x += 1;  endwhile  disp(["row ", num2str(y)]);   y += 1;endwhiletoc()